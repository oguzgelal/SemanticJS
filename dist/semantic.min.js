!function(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C={debug:!0};e=function(){function a(){this.code=d,this.name=d,this.notice=d,this.message=d}return a.prototype.toString=function(){return this.name+" ("+this.code+") : "+this.notice},a.prototype.details=function(){return this.name+" ("+this.code+") : "+this.message},a}(),f=function(){function a(a){this.code=2,this.name="URI generation failed",this.notice="URI cannot be created.",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),g=function(){var a=function(a,b,c){var d=f;if("string"!=typeof a)throw new d("The name parameter should be of type string.");if("string"!=typeof b)throw new d("The domain parameter should be of type string.");if("string"!=typeof c)throw new d("The path parameter should be of type string.");if(!a||a&&0===a.length)throw new d("Name parameter not present or empty.");if(!b||b&&0===b.length)throw new d("Domain parameter not present or empty.");if(!c||c&&0===c.length)throw new d("Path parameter not present or empty.");return"/"===b.substring(b.length-1,b.length)&&(b=b.substring(0,b.length-1)),"/"===c.substring(c.length-1,c.length)&&(c=c.substring(0,c.length-1)),"/"===c.substring(0,1)&&(c=c.substring(1,c.length)),b.match(/(\w)*:\/\//gi)||(b="http://"+b),b+"/"+c+"/"+a};return a}(),h=function(){var a=function(a){return"/"===a.substring(a.length-1,a.length)&&(a=a.substring(0,a.length-1)),a.match(/(\w)*:\/\//gi)||(a="http://"+a),a};return a}(),i=function(){var a=function(a){for(var b="",c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",d=0;a>d;d++)b+=c.charAt(Math.floor(Math.random()*c.length));return b};return a}(),j=function(){var a={createURI:g,stripDomain:h,randomString:i};return a}(),k=function(){function a(a){this.code=0,this.name="Create entity failed",this.notice="Entity cannot be created",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),l=function(){var a=function(a){var b=q,c=j,d=k;if("string"!=typeof a)throw new d("Argument of 'createEntity' must be of type 'String' and indicate the name of the entity.");if(!a||a&&0===a.length)throw new d("Argument of 'createEntity' is blank or empty.");var e=c.createURI(a,this.ontology.domain,"entity");if(-1!=this.ontology.occupiedURIs.indexOf(e))throw new d("An entity with the same name already exists.");this.ontology.occupiedURIs.push(e);var f=new b(a);return f.URI=e,f.parent=this,f.ontology=this.ontology,this.subs[a]=f,this.ontology.entityCollection[a]=f,C.debug&&console.log("Entity '"+a+"' created under the entity '"+this.name+"'."),f};return a}(),m=function(){function a(a){this.code=3,this.name="Make sub entity failed",this.notice="Sub entity making failed.",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),n=function(){var a=function(a){var b=m;if("object"!=typeof a||!a.type||"entity"!==a.type)throw new b("The argument of makeSubEntity must be entity object.");if(null!==this.parent)throw new b("'"+this.name+"' Entity already has a parent");a.subs[this.name]=this,this.parent=a,C.debug&&console.log("Entity '"+this.name+"' is now a sub-entity of '"+a.name+"'.")};return a}(),o=function(){function a(a){this.code=5,this.name="Add relation failed",this.notice="Relation cannot be added",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),p=function(){var a=function(a,b){var c=o;if("object"!=typeof a||!a.type||"relation"!==a.type)throw new c("The first argument of addRelation must be a relation object.");if("object"!=typeof b||!b.type||"entity"!==b.type&&"literal"!==b.type)throw new c("The second argument of addRelation must be a entity or literal object.");a.domains[this.name]=this,a.ranges[b.name]=b,this.relOut.push([a,b]),"entity"===b.type&&b.relIn.push([a,this])};return a}(),q=function(){function a(a){this.type="entity",this.name=a,this.URI=null,this.relOut=[],this.relIn=[],this.individuals={},this.subs={},this.parent=null,this.ontology=null}return a.prototype.createSubEntity=l,a.prototype.makeSubEntity=n,a.prototype.addRelation=p,a}(),r=function(){var a=function(a){var b=q,c=j,d=k;if("string"!=typeof a)throw new d("Argument of 'createEntity' must be of type 'String' and indicate the name of the entity.");if(!a||a&&0===a.length)throw new d("Argument of 'createEntity' is blank or empty.");if(!this.name)throw new d("Unique name of the ontology should be set before creating any entities.");if(!this.domain)throw new d("Unique domain of the ontology should be set before creating any entities.");var e=c.createURI(a,this.domain,"entity");if(-1!=this.occupiedURIs.indexOf(e))throw new d("An entity with the same name already exists.");this.occupiedURIs.push(e);var f=new b(a);return f.ontology=this,f.URI=e,this.entityCollection[a]=f,C.debug&&console.log("Entity '"+a+"' created."),f};return a}(),s=function(){function a(a){this.type="relation",this.name=a,this.URI=null,this.ontology=null,this.domains={},this.ranges={}}return a}(),t=function(){function a(a){this.code=4,this.name="Create relation failed",this.notice="Relation cannot be created",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),u=function(){var a=function(a){var b=s,c=j,d=t;if("string"!=typeof a)throw new d("Argument of 'createRelation' must be of type 'String' and indicate the name of the relation.");if(!a||a&&0===a.length)throw new d("Argument of 'createRelation' is blank or empty.");if(!this.name)throw new d("Unique name of the ontology should be set before creating any relations.");if(!this.domain)throw new d("Unique domain of the ontology should be set before creating any relations.");var e=c.createURI(a,this.domain,"relation");if(-1!=this.occupiedURIs.indexOf(e))throw new d("A relation with the same name already exists.");this.occupiedURIs.push(e);var f=new b(a);return f.ontology=this,f.URI=e,this.relationCollection[a]=f,C.debug&&console.log("Relation '"+a+"' created."),f};return a}(),v=function(){function a(a){this.type="literal",this.literaltype=typeof a,this.URI=null,this.value=a,this.ontology=null}return a}(),w=function(){function a(a){this.code=4,this.name="Create literal failed",this.notice="Literal cannot be created",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),x=function(){var a=function(a){var b=v,c=j,e=w;if(null===a||a===d)throw new e("Argument of 'createLiteral' is blank or empty.");if(!this.name)throw new e("Unique name of the ontology should be set before creating any literals.");if(!this.domain)throw new e("Unique domain of the ontology should be set before creating any literals.");for(var f=3,g=c.randomString(f),h=c.createURI(g,this.domain,"literal"),i=0,k=20;-1!=this.occupiedURIs.indexOf(h);)g=c.randomString(f),h=c.createURI(g,this.domain,"literal"),i++,i>=k&&(f++,i=0);this.occupiedURIs.push(h);var l=new b(a);return l.ontology=this,l.URI=h,C.debug&&console.log("Literal '"+a.toString()+"' created ("+h+")."),l};return a}(),y=function(){function a(a,b){this.type="ontology",this.name=a,this.URI=null,this.domain=b,this.entityCollection={},this.relationCollection={},this.occupiedURIs=[]}return a.prototype.createEntity=r,a.prototype.createRelation=u,a.prototype.createLiteral=x,a}(),z=function(){function a(a){this.code=1,this.name="Create ontology failed",this.notice="Ontology cannot be created",this.message=a,C.debug&&console.log(this.details())}var b=e;return a.prototype=new b,a}(),A=function(){var a=function(a,b){var c=y,d=j,e=z;if("string"!=typeof a)throw new e("Name argument of 'createOntology' must be of type 'String'.");if("string"!=typeof b)throw new e("Domain argument of 'createOntology' must be of type 'String'.");if(!a||a&&0===a.length)throw new e("Name argument not present or blank.");if(!b||b&&0===b.length)throw new e("Domain argument not present or blank.");if(b=d.stripDomain(b),-1!=this.occupiedDomains.indexOf(b))throw new e("An ontology with the same domain already exists.");this.occupiedDomains.push(b);var f=new c(a,b),g=d.createURI(a,b,"ontology");return f.URI=g,this.ontologies[g]=f,C.debug&&console.log("Ontology '"+a+"' created."),f};return a}(),B=function(){function a(){this.ontologies={},this.occupiedDomains=[]}return a.prototype.createOntology=A,a.prototype.setDebug=function(a){"boolean"==typeof a&&(C.debug=a)},a.prototype.getDebug=function(){return C.debug},a}(),function(b){"function"==typeof define&&define.amd?define([],function(){return b}):"undefined"!=typeof exports?module.exports=b:a.Semant=b}(B)}("undefined"!=typeof window?window:{},"undefined"!=typeof document?document:{createElement:function(){}},"undefined"!=typeof window?window.navigator:{});